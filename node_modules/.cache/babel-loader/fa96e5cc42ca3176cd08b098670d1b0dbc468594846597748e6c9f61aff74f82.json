{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bhaga\\\\OneDrive\\\\Documents\\\\Web Technology\\\\Project\\\\Sample\\\\grocery-store\\\\frontend\\\\src\\\\context\\\\ThemeContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/context/ThemeContext.js\nimport React, { createContext, useState, useContext } from 'react';\n\n// Create a context with a default value (you can add other values here as well)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext();\n\n// ThemeProvider component to wrap the application\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s();\n  const [theme, setTheme] = useState('light'); // Default theme is 'light'\n\n  const toggleTheme = () => {\n    setTheme(prevTheme => prevTheme === 'light' ? 'dark' : 'light');\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      theme,\n      toggleTheme\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use the Theme context\n_s(ThemeProvider, \"c/tiXTWXTQispzpG//dV5FX41vQ=\");\n_c = ThemeProvider;\nexport const useTheme = () => {\n  _s2();\n  const context = useContext(ThemeContext);\n\n  // Check if the context is undefined (which can happen if it's not wrapped correctly)\n  if (!context) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n_s2(useTheme, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","jsxDEV","_jsxDEV","ThemeContext","ThemeProvider","children","_s","theme","setTheme","toggleTheme","prevTheme","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTheme","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/bhaga/OneDrive/Documents/Web Technology/Project/Sample/grocery-store/frontend/src/context/ThemeContext.js"],"sourcesContent":["// src/context/ThemeContext.js\r\nimport React, { createContext, useState, useContext } from 'react';\r\n\r\n// Create a context with a default value (you can add other values here as well)\r\nconst ThemeContext = createContext();\r\n\r\n// ThemeProvider component to wrap the application\r\nexport const ThemeProvider = ({ children }) => {\r\n  const [theme, setTheme] = useState('light'); // Default theme is 'light'\r\n\r\n  const toggleTheme = () => {\r\n    setTheme((prevTheme) => (prevTheme === 'light' ? 'dark' : 'light'));\r\n  };\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n\r\n// Custom hook to use the Theme context\r\nexport const useTheme = () => {\r\n  const context = useContext(ThemeContext);\r\n\r\n  // Check if the context is undefined (which can happen if it's not wrapped correctly)\r\n  if (!context) {\r\n    throw new Error('useTheme must be used within a ThemeProvider');\r\n  }\r\n\r\n  return context;\r\n};\r\n"],"mappings":";;;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,QAAQ,OAAO;;AAElE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,YAAY,gBAAGL,aAAa,CAAC,CAAC;;AAEpC;AACA,OAAO,MAAMM,aAAa,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC7C,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;;EAE7C,MAAMU,WAAW,GAAGA,CAAA,KAAM;IACxBD,QAAQ,CAAEE,SAAS,IAAMA,SAAS,KAAK,OAAO,GAAG,MAAM,GAAG,OAAQ,CAAC;EACrE,CAAC;EAED,oBACER,OAAA,CAACC,YAAY,CAACQ,QAAQ;IAACC,KAAK,EAAE;MAAEL,KAAK;MAAEE;IAAY,CAAE;IAAAJ,QAAA,EAClDA;EAAQ;IAAAQ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;;AAED;AAAAV,EAAA,CAdaF,aAAa;AAAAa,EAAA,GAAbb,aAAa;AAe1B,OAAO,MAAMc,QAAQ,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC5B,MAAMC,OAAO,GAAGpB,UAAU,CAACG,YAAY,CAAC;;EAExC;EACA,IAAI,CAACiB,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,8CAA8C,CAAC;EACjE;EAEA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CATWD,QAAQ;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}