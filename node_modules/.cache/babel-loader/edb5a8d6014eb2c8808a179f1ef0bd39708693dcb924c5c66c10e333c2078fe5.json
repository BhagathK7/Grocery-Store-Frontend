{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bhaga\\\\OneDrive\\\\Documents\\\\Web Technology\\\\Project\\\\Sample\\\\grocery-store\\\\frontend\\\\src\\\\pages\\\\CartPage.js\",\n  _s = $RefreshSig$();\n// frontend/src/pages/CartPage.js\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartPage = ({\n  userId\n}) => {\n  _s();\n  const [cart, setCart] = useState([]);\n  const [totalAmount, setTotalAmount] = useState(0);\n  const [loading, setLoading] = useState(true); // Loading state\n  const [error, setError] = useState(null); // Error state\n\n  useEffect(() => {\n    // Fetch cart data when the component mounts\n    const fetchCart = async () => {\n      try {\n        const response = await fetch(`http://localhost:5000/cart/${userId}`);\n        if (!response.ok) {\n          throw new Error('Failed to fetch cart');\n        }\n        const data = await response.json();\n        if (data.cart) {\n          setCart(data.cart); // Set cart state\n          setTotalAmount(data.totalAmount); // Set totalAmount\n        } else {\n          setCart([]); // If no cart data, set empty cart\n        }\n      } catch (error) {\n        console.error('Error fetching cart:', error);\n        setError('Could not fetch the cart. Please try again later.');\n      } finally {\n        setLoading(false); // Stop loading when fetch is complete\n      }\n    };\n    fetchCart();\n  }, [userId]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 12\n    }, this); // Show loading message\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 12\n    }, this); // Show error message\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Your Cart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), cart && cart.length > 0 ? cart.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [item.productId.name, \" - \", item.quantity, \" x $\", item.productId.price]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 11\n    }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Your cart is empty.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Total: $\", totalAmount]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s(CartPage, \"4bSElGZq+9c18E8d4EPkBI/JkYU=\");\n_c = CartPage;\nexport default CartPage;\nvar _c;\n$RefreshReg$(_c, \"CartPage\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","CartPage","userId","_s","cart","setCart","totalAmount","setTotalAmount","loading","setLoading","error","setError","fetchCart","response","fetch","ok","Error","data","json","console","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","item","index","productId","name","quantity","price","_c","$RefreshReg$"],"sources":["C:/Users/bhaga/OneDrive/Documents/Web Technology/Project/Sample/grocery-store/frontend/src/pages/CartPage.js"],"sourcesContent":["// frontend/src/pages/CartPage.js\r\n\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nconst CartPage = ({ userId }) => {\r\n  const [cart, setCart] = useState([]);\r\n  const [totalAmount, setTotalAmount] = useState(0);\r\n  const [loading, setLoading] = useState(true); // Loading state\r\n  const [error, setError] = useState(null); // Error state\r\n\r\n  useEffect(() => {\r\n    // Fetch cart data when the component mounts\r\n    const fetchCart = async () => {\r\n      try {\r\n        const response = await fetch(`http://localhost:5000/cart/${userId}`);\r\n\r\n        if (!response.ok) {\r\n          throw new Error('Failed to fetch cart');\r\n        }\r\n\r\n        const data = await response.json();\r\n\r\n        if (data.cart) {\r\n          setCart(data.cart); // Set cart state\r\n          setTotalAmount(data.totalAmount); // Set totalAmount\r\n        } else {\r\n          setCart([]); // If no cart data, set empty cart\r\n        }\r\n\r\n      } catch (error) {\r\n        console.error('Error fetching cart:', error);\r\n        setError('Could not fetch the cart. Please try again later.');\r\n      } finally {\r\n        setLoading(false); // Stop loading when fetch is complete\r\n      }\r\n    };\r\n\r\n    fetchCart();\r\n  }, [userId]);\r\n\r\n  if (loading) {\r\n    return <p>Loading...</p>; // Show loading message\r\n  }\r\n\r\n  if (error) {\r\n    return <p>{error}</p>; // Show error message\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>Your Cart</h2>\r\n      {cart && cart.length > 0 ? (\r\n        cart.map((item, index) => (\r\n          <div key={index}>\r\n            <p>{item.productId.name} - {item.quantity} x ${item.productId.price}</p>\r\n          </div>\r\n        ))\r\n      ) : (\r\n        <p>Your cart is empty.</p>\r\n      )}\r\n      <h3>Total: ${totalAmount}</h3>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CartPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}